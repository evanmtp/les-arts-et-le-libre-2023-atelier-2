<jittershader name="default">
	<description> Default shader </description>
	
	<param name="modelViewMat"	type="mat4" state="MODELVIEW_MATRIX" />
	<param name="projectionMat"	type="mat4"	state="PROJECTION_MATRIX" />
	<param name="texture0_Mat"	type="mat4" state="TEXTURE0_MATRIX" />
	<param name="normalMat"		type="mat3" state="NORMAL_MATRIX" />
	
	<param name="textureCoord"	type="vec2" state="TEXCOORD" />
	<param name="vertexPos"		type="vec3"	state="POSITION" />
	<param name="vertexNormal"	type="vec3"	state="NORMAL" />

	<param name="noiseTex"		type="int"		default="0" />
	<param name="freq"			type="float"	default="2.0" />
	<param name="colorFreqs"	type="vec3"		default="1.0 1.0 1.0" />
	
	<language name="glsl" version="1.5">
	
		<bind param="noiseTex"		program="vp" />
		<bind param="freq"			program="vp" />
		<bind param="colorFreqs"	program="vp" />
		
		<bind param="modelViewMat" program="vp" />
		<bind param="projectionMat" program="vp" />
		<bind param="texture0_Mat" program="vp" />		
		<bind param="textureCoord" program="vp" />
		
		<bind param="vertexPos" program="vp" />
		<bind param="normalMat" program="vp" />
		<bind param="vertexNormal" program="vp" />
				
		<program name="vp" type="vertex">
<![CDATA[
#version 330 core
uniform mat4 modelViewMat;
uniform mat4 projectionMat;
uniform mat4 texture0_Mat;
uniform mat3 normalMat;
	
in vec2 textureCoord;
in vec3 vertexPos;
in vec3 vertexNormal;
				
uniform sampler2D noiseTex;
uniform float freq;
uniform vec3 colorFreqs;

out vec4 color;

void main (void)
{
	vec2 texcoord = (texture0_Mat * vec4(textureCoord, 0.0, 1.0)).xy;

	float noise = texture(noiseTex, texcoord * freq).x;
	
//	vec4 colours = texture2D(noiseTex, texcoord); 

	vec4 posEyeSpace = modelViewMat * vec4(vertexPos, 1.0);

	vec3 normal = normalMat * vertexNormal;
	
	normal = normalize(normal);

	vec4 newPos = posEyeSpace + vec4(normal, 1.) * noise;

    gl_Position = projectionMat * newPos;

	color = vec4(abs(sin(noise * colorFreqs.x)), abs(cos(noise * colorFreqs.y)), abs(sin(noise * colorFreqs.z + 1000.)), 1.0);
//	color = vec4((colours.r * colorFreqs.x), (colours.g * colorFreqs.y), (colours.b * colorFreqs.z), 1.0);
}
]]>		
		</program>
		<program name="fp" type="fragment">
<![CDATA[
	#version 330 core

in vec4 color;

out vec4 outColor;

void main()
{	
	outColor = color;
} 
]]>
		</program>
	</language>
</jittershader>
